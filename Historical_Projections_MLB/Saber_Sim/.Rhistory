diff
sum(diff)
sum(a)
sums = 0
for(i in diff) {sum = sum + i}
for(i in diff) {print(i)}
for(i in diff) {sums = sums + i}
sums
length(which(is.na(a)))
which(is.na(a))
a[547]
View(test.df)
test.df[547,]
mlb.lme2 = lme(Actual ~ Swish.Projection + Last.5.Avg + Saber.Projection + Total +
CS + ISO + K..3 + Season.Ceiling + SalDiff + Salary,
random = ~ Date | Name,
data = train.df)
a = predict(mlb.lme2, test.df)
which(is.na(a))
a = predict(mlb.lme, test.df)
which(is.na(a))
test.df[1196,]
a = predict(mlb.lme2, test.df)
b = predict(mlb.lme, test.df)
a.na = which(is.na(a))
mse = function(df, projected) {
for(i in 1:length(projected)) {
if(is.na(projected[i])) {
projected[i] = df$Swish.Projection
}
}
diff = actual - projected
diff.sq = diff^2
return(sum(diff.sq))
}
mse(test.df, a)
mse = function(df, projected) {
for(i in 1:length(projected)) {
if(is.na(projected[i])) {
projected[i] = df$Swish.Projection[i]
}
}
diff = actual - projected
diff.sq = diff^2
return(sum(diff.sq))
}
mse(test.df, a)
mse = function(df, projected) {
for(i in 1:length(projected)) {
if(is.na(projected[i])) {
projected[i] = df$Swish.Projection[i]
}
}
diff = df$Actual - projected
diff.sq = diff^2
return(sum(diff.sq))
}
mse(test.df, a)
mse(test.df, b)
a = predict(mlb.lme2, test.df, interval = "predict")
a
names(a)
a = predict(mlb.lme2, test.df, interval = "predict", level = 0.9)
a = predict(mlb.lme2, test.df, interval = "predict")
a
a = predict(mlb.lme, test.df)
b = predict(mlb.lme2, test.df)
mse(test.df, a)
mse(test.df, b)
mse(test.df, test.df$Swish.Projection)
mse(test.df, test.df$Roto.Projection)
mse(test.df, test.df$Saber.Projection)
labelName = "Actual"
predictors = c("Salary", "SalDiff", "Total", "ISO", "SLG", "AB.1", "ISO.1",
"SLG.1", "AVG.2", "wOBA.2", "AB.3", "AVG.3", "OBP.3", "K..3", "Last.5.Avg",
"Season.Ceiling", "Saber.Projection", "CS", "Swish.Projection")
model.gbm = train(as.matrix(train.df[,predictors]),
train.df[,labelName],
method = "gbm",
trControl = control)
predictors = c("Salary", "SalDiff", "Total", "ISO", "SLG", "AB.1", "ISO.1",
"SLG.1", "AVG.2", "wOBA.2", "AB.3", "AVG.3", "OBP.3", "K..3", "Last.5.Avg",
"Season.Ceiling", "Saber.Projection", "CS", "Swish.Projection", "Name")
mixed.boost = metb(as.matrix(train.df[,predictors]),
train.df[,labelName],
id = "Name",
n.trees = 50,
interaction.depth = 3,
shrinkage = 0.1,
n.minobsinnode = 10)
library(mvtboost)
mixed.boost = metb(as.matrix(train.df[,predictors]),
train.df[,labelName],
id = "Name",
n.trees = 50,
interaction.depth = 3,
shrinkage = 0.1,
n.minobsinnode = 10)
install.packages("patr1ckm")
devtools::install_github("patr1ckm/mvtboost")
devtools::install_github("patr1ckm/gbm")
devtools::install_github("patr1ckm/gbm")
install.packages("Rcpp")
metb()
library(mvtboost)
metb()
mvtboost
lsf.str("package:mvtboost")
library(patr1ckm/mvtboost)
source("C:/Users/Ming/Documents/Fantasy_Models/MLB_Models/baseball_class.R")
i = 1
date = dates[[i]]
path.hitters.proj.temp = gsub.custom(path.hitters.proj, date)
path.pitchers.proj.temp = gsub.custom(path.pitchers.proj, date)
path.players.actual.temp = gsub.custom(path.players.actual, date)
saber.file = paste(path.saber, saber.files[[i]], sep = "/")
hitters.proj = merge.rotogrinders(path.hitters.proj.temp, saber.file, TRUE)
pitchers.proj = merge.rotogrinders(path.pitchers.proj.temp, saber.file, FALSE)
tail(hitters.proj)
head(hitters.proj)
source("C:/Users/Ming/Documents/Fantasy_Models/MLB_Models/baseball_class.R")
# Overlaps to test
overlaps = 5:7
# Salary cap
salary.cap = 50000
# Lineups to generate per entry
num.lineups = 150
# Paths to required folders
path.hitters.proj = "C:/Users/Ming/Documents/Fantasy_Models/Historical_Projections_MLB/Hitters/hitter_DATE.csv"
path.pitchers.proj = "C:/Users/Ming/Documents/Fantasy_Models/Historical_Projections_MLB/Pitchers/pitcher_DATE.csv"
path.players.actual = "C:/Users/Ming/Documents/Fantasy_Models/Actual_Scores_MLB/players_DATE.csv"
# Run backtesting (this will take hours and hours, and will crash eventually on most computers)
backtest(overlaps, salary.cap,
num.lineups, path.hitters.proj,
path.pitchers.proj, path.players.actual,
path.saber)
# Number of pitchers
num.pitchers = nrow(pitchers)
# Create a matrix where each row is a vector for a different position
empty = rep(0, num.hitters * 6)
hitters.matrix = matrix(empty, nrow = 6)
# Populate vectors for all positions
for(i in 1:num.hitters) {
if(grepl("1B", hitters[i, "Position"])) {
hitters.matrix[1, i] = 1
}
if(grepl("2B", hitters[i, "Position"])) {
hitters.matrix[2, i] = 1
}
if(grepl("3B", hitters[i, "Position"])) {
hitters.matrix[3, i] = 1
}
if(grepl("SS", hitters[i, "Position"])) {
hitters.matrix[4, i] = 1
}
if(grepl("C", hitters[i, "Position"])) {
hitters.matrix[5, i] = 1
}
if(grepl("OF", hitters[i, "Position"])) {
hitters.matrix[6, i] = 1
}
}
hitters.list = list(first.basemen = hitters.matrix[1,],
second.basemen = hitters.matrix[2,],
third.basemen = hitters.matrix[3,],
shortstops = hitters.matrix[4,],
outfielders = hitters.matrix[5,],
catchers = hitters.matrix[6,])
# List where each entry is a vector that stores info on what team a player is on
teams = unique(hitters[,"Team"])
num.teams = length(teams)
team.distribution = list()
for(i in 1:num.hitters) {
player.info = rep(0, num.teams)
for(j in 1:num.teams) {
if(hitters[i, "Team"] == teams[j]) {
player.info[j] = 1
}
}
team.distribution = list.append(team.distribution, player.info)
}
# Converting list into a matrix
hitters.teams = Reduce(function(x, y) {
rbind(x, y)
}, team.distribution)
# List where each entry is a vector that stores what game a hitter is playing in
players = rbind(subset(hitters, select = -c(Order)), pitchers)
games = unique(players[,"Teams.Playing"])
duplicated = c()
for(game in games) {
game = unlist(strsplit(game, split = "@"))
if(length(which(grepl(game[1], duplicated) &
grepl(game[2], duplicated))) > 0) {
games = games[games != paste(game[1], game[2], sep = "@")]
}
else {
duplicated = append(duplicated, paste(game[1], game[2], sep = "@"))
}
}
num.games = length(games)
games.distribution = list()
for(i in 1:nrow(players)) {
player.info = rep(0, num.games)
team = unlist(strsplit(players[i, "Teams.Playing"], split = "@"))
for(j in 1:num.games) {
if(grepl(team[1], games[j]) &
grepl(team[2], games[j])) {
player.info[j] = 1
}
}
games.distribution = list.append(games.distribution, player.info)
}
# Converting list into a matrix
players.games = Reduce(function(x, y) {
rbind(x, y)
}, games.distribution)
num.hitters
dim(players.games)
num.games
num.hitters + num.pitchers
nCol
lfs = append(players.games[,i], rep(0, num.teams))
lfs = append(lfs,  -1 * getIdx(i, num.games))
i
i = 1
lfs = append(players.games[,i], rep(0, num.teams))
lfs = append(lfs,  -1 * getIdx(i, num.games))
length(lfs)
nCol = num.hitters + num.pitchers + num.teams + num.games
nCol
source("C:/Users/Ming/Documents/Fantasy_Models/MLB_Models/baseball_class.R")
# Overlaps to test
overlaps = 5:7
# Salary cap
salary.cap = 50000
# Lineups to generate per entry
num.lineups = 150
# Paths to required folders
path.hitters.proj = "C:/Users/Ming/Documents/Fantasy_Models/Historical_Projections_MLB/Hitters/hitter_DATE.csv"
path.pitchers.proj = "C:/Users/Ming/Documents/Fantasy_Models/Historical_Projections_MLB/Pitchers/pitcher_DATE.csv"
path.players.actual = "C:/Users/Ming/Documents/Fantasy_Models/Actual_Scores_MLB/players_DATE.csv"
# Run backtesting (this will take hours and hours, and will crash eventually on most computers)
results = backtest(overlaps, salary.cap,
num.lineups, path.hitters.proj,
path.pitchers.proj, path.players.actual,
path.saber)
scores
length(scores)
num.lineups = 150
overlap = 6
df = create_lineups(num.lineups, overlap,
stacked.lineup.a, salary.cap,
hitters.proj, pitchers.proj,
0.1, 0.01)
scores = get.scores(df, hitters.proj, pitchers.proj)
max(scores)
scores
i = 2
date = dates[[i]]
path.hitters.proj.temp = gsub.custom(path.hitters.proj, date)
path.pitchers.proj.temp = gsub.custom(path.pitchers.proj, date)
path.players.actual.temp = gsub.custom(path.players.actual, date)
saber.file = paste(path.saber, saber.files[[i]], sep = "/")
hitters.proj = merge.rotogrinders(path.hitters.proj.temp, saber.file, TRUE)
pitchers.proj = merge.rotogrinders(path.pitchers.proj.temp, saber.file, FALSE)
df = create_lineups(num.lineups, overlap,
stacked.lineup.a, salary.cap,
hitters.proj, pitchers.proj,
0.1, 0.01)
dim(hitters.proj)
View(hitters.proj)
dim(pitchers.proj)
df = create_lineups(num.lineups, overlap,
stacked.lineup.a, salary.cap,
hitters.proj, pitchers.proj,
0.1, 0.01)
hitters = hitters.proj
pitchers = pitchers.proj
num.hitters = nrow(hitters)
# Number of pitchers
num.pitchers = nrow(pitchers)
# Create a matrix where each row is a vector for a different position
empty = rep(0, num.hitters * 6)
hitters.matrix = matrix(empty, nrow = 6)
# Populate vectors for all positions
for(i in 1:num.hitters) {
if(grepl("1B", hitters[i, "Position"])) {
hitters.matrix[1, i] = 1
}
if(grepl("2B", hitters[i, "Position"])) {
hitters.matrix[2, i] = 1
}
if(grepl("3B", hitters[i, "Position"])) {
hitters.matrix[3, i] = 1
}
if(grepl("SS", hitters[i, "Position"])) {
hitters.matrix[4, i] = 1
}
if(grepl("C", hitters[i, "Position"])) {
hitters.matrix[5, i] = 1
}
if(grepl("OF", hitters[i, "Position"])) {
hitters.matrix[6, i] = 1
}
}
hitters.list = list(first.basemen = hitters.matrix[1,],
second.basemen = hitters.matrix[2,],
third.basemen = hitters.matrix[3,],
shortstops = hitters.matrix[4,],
outfielders = hitters.matrix[5,],
catchers = hitters.matrix[6,])
# List where each entry is a vector that stores info on what team a player is on
teams = unique(hitters[,"Team"])
num.teams = length(teams)
team.distribution = list()
for(i in 1:num.hitters) {
player.info = rep(0, num.teams)
for(j in 1:num.teams) {
if(hitters[i, "Team"] == teams[j]) {
player.info[j] = 1
}
}
team.distribution = list.append(team.distribution, player.info)
}
# Converting list into a matrix
hitters.teams = Reduce(function(x, y) {
rbind(x, y)
}, team.distribution)
# List where each entry is a vector that stores what game a hitter is playing in
players = rbind(subset(hitters, select = -c(Order)), pitchers)
games = unique(players[,"Teams.Playing"])
duplicated = c()
for(game in games) {
game = unlist(strsplit(game, split = "@"))
if(length(which(grepl(game[1], duplicated) &
grepl(game[2], duplicated))) > 0) {
games = games[games != paste(game[1], game[2], sep = "@")]
}
else {
duplicated = append(duplicated, paste(game[1], game[2], sep = "@"))
}
}
num.games = length(games)
games.distribution = list()
for(i in 1:nrow(players)) {
player.info = rep(0, num.games)
team = unlist(strsplit(players[i, "Teams.Playing"], split = "@"))
for(j in 1:num.games) {
if(grepl(team[1], games[j]) &
grepl(team[2], games[j])) {
player.info[j] = 1
}
}
games.distribution = list.append(games.distribution, player.info)
}
# Converting list into a matrix
players.games = Reduce(function(x, y) {
rbind(x, y)
}, games.distribution)
# Pitchers' opponents
opponents = pitchers[,"Opponent"]
opponents.list = list()
for(i in 1:length(opponents)) {
for(j in 1:num.teams) {
if(opponents[i] == teams[j]) {
opponents.list = list.append(opponents.list, hitters.teams[,j])
}
}
}
pitchers.opponents = Reduce(function(x, y) {
rbind(x, y)
}, opponents.list)
# n by n matrix, where each entry (x,y) is 1 if the hitter in row x is within the same five-person
# lineup as the hitter in row y, and 0 otherwise
empty = rep(0, num.hitters * num.hitters)
consecutive.matrix = matrix(empty, nrow = num.hitters)
for(i in 1:num.hitters) {
for(j in 1:num.hitters) {
consecutive.matrix[i, j] = ifelse(is.consecutive(hitters, i, j), 1, 0)
}
}
dim(players.games)
num.games
players.games[,15]
formulation = stacked.lineup.a
# Create a lineup
tracer = matrix(rep(0, num.hitters + num.pitchers), nrow = 1)
lineups = formulation(hitters, pitchers, tracer, num.overlap,
num.hitters, num.pitchers, hitters.list[[1]],
hitters.list[[2]], hitters.list[[3]],
hitters.list[[4]], hitters.list[[5]],
hitters.list[[6]], num.teams, hitters.teams,
num.games, hitters.games, pitchers.games,
salary.cap, pitchers.opponents, consecutive.matrix)
lineups = matrix(lineups, nrow = 1)
lineups
num.lineups
if(num.lineups > 1) {
for(i in 1:(num.lineups - 1)) {
lineup = formulation(hitters, pitchers, lineups, num.overlap,
num.hitters, num.pitchers, hitters.list[[1]],
hitters.list[[2]], hitters.list[[3]],
hitters.list[[4]], hitters.list[[5]],
hitters.list[[6]], num.teams, hitters.teams,
num.games, hitters.games, pitchers.games,
salary.cap, pitchers.opponents, consecutive.matrix)
lineups = rbind(lineups, lineup)
}
}
if(num.lineups > 1) {
for(i in 1:(num.lineups - 1)) {
lineup = formulation(hitters, pitchers, lineups, num.overlap,
num.hitters, num.pitchers, hitters.list[[1]],
hitters.list[[2]], hitters.list[[3]],
hitters.list[[4]], hitters.list[[5]],
hitters.list[[6]], num.teams, hitters.teams,
num.games, hitters.games, pitchers.games,
salary.cap, pitchers.opponents, consecutive.matrix)
lineups = rbind(lineups, lineup)
print(i)
}
}
df = create_lineups(num.lineups, overlap,
stacked.lineup.a, salary.cap,
hitters.proj, pitchers.proj,
0.1, 0.01)
i
i = 2
date = dates[[i]]
path.hitters.proj.temp = gsub.custom(path.hitters.proj, date)
path.pitchers.proj.temp = gsub.custom(path.pitchers.proj, date)
path.players.actual.temp = gsub.custom(path.players.actual, date)
saber.file = paste(path.saber, saber.files[[i]], sep = "/")
hitters.proj = merge.rotogrinders(path.hitters.proj.temp, saber.file, TRUE)
pitchers.proj = merge.rotogrinders(path.pitchers.proj.temp, saber.file, FALSE)
df = create_lineups(num.lineups, overlap,
stacked.lineup.a, salary.cap,
hitters.proj, pitchers.proj,
0.1, 0.01)
d = 3
date = dates[[d]]
path.hitters.proj.temp = gsub.custom(path.hitters.proj, date)
path.pitchers.proj.temp = gsub.custom(path.pitchers.proj, date)
path.players.actual.temp = gsub.custom(path.players.actual, date)
saber.file = paste(path.saber, saber.files[[i]], sep = "/")
hitters.proj = merge.rotogrinders(path.hitters.proj.temp, saber.file, TRUE)
pitchers.proj = merge.rotogrinders(path.pitchers.proj.temp, saber.file, FALSE)
df = create_lineups(num.lineups, overlap,
stacked.lineup.a, salary.cap,
hitters.proj, pitchers.proj,
0.1, 0.01)
dim(hitters.proj)
dim(pitchers.proj)
d = 4
date = dates[[d]]
path.hitters.proj.temp = gsub.custom(path.hitters.proj, date)
path.pitchers.proj.temp = gsub.custom(path.pitchers.proj, date)
path.players.actual.temp = gsub.custom(path.players.actual, date)
saber.file = paste(path.saber, saber.files[[i]], sep = "/")
hitters.proj = merge.rotogrinders(path.hitters.proj.temp, saber.file, TRUE)
pitchers.proj = merge.rotogrinders(path.pitchers.proj.temp, saber.file, FALSE)
df = create_lineups(num.lineups, overlap,
stacked.lineup.a, salary.cap,
hitters.proj, pitchers.proj,
0.1, 0.01)
dim(pitchers.proj)
d = 5
date = dates[[d]]
path.hitters.proj.temp = gsub.custom(path.hitters.proj, date)
path.pitchers.proj.temp = gsub.custom(path.pitchers.proj, date)
path.players.actual.temp = gsub.custom(path.players.actual, date)
saber.file = paste(path.saber, saber.files[[i]], sep = "/")
hitters.proj = merge.rotogrinders(path.hitters.proj.temp, saber.file, TRUE)
pitchers.proj = merge.rotogrinders(path.pitchers.proj.temp, saber.file, FALSE)
df = create_lineups(num.lineups, overlap,
stacked.lineup.a, salary.cap,
hitters.proj, pitchers.proj,
0.1, 0.01)
dim(hitters.proj)
dim(pitchers.proj)
d = 6
date = dates[[d]]
path.hitters.proj.temp = gsub.custom(path.hitters.proj, date)
path.pitchers.proj.temp = gsub.custom(path.pitchers.proj, date)
path.players.actual.temp = gsub.custom(path.players.actual, date)
saber.file = paste(path.saber, saber.files[[i]], sep = "/")
hitters.proj = merge.rotogrinders(path.hitters.proj.temp, saber.file, TRUE)
pitchers.proj = merge.rotogrinders(path.pitchers.proj.temp, saber.file, FALSE)
df = create_lineups(num.lineups, overlap,
stacked.lineup.a, salary.cap,
hitters.proj, pitchers.proj,
0.1, 0.01)
warnings()
dim(pitchers.proj)
dim(hitters.proj)
d = 1
date = dates[[d]]
path.hitters.proj.temp = gsub.custom(path.hitters.proj, date)
path.pitchers.proj.temp = gsub.custom(path.pitchers.proj, date)
path.players.actual.temp = gsub.custom(path.players.actual, date)
saber.file = paste(path.saber, saber.files[[i]], sep = "/")
hitters.proj = merge.rotogrinders(path.hitters.proj.temp, saber.file, TRUE)
pitchers.proj = merge.rotogrinders(path.pitchers.proj.temp, saber.file, FALSE)
df = create_lineups(num.lineups, overlap,
stacked.lineup.a, salary.cap,
hitters.proj, pitchers.proj,
0.1, 0.01)
warnings()
dim(pitchers.proj)
dim(hitters.proj)
date
df

source("C:/Users/Ming/Documents/Fantasy_Models/MLB_Models/baseball_class.R")
choose(3,2)
sourceCpp("C:/Users/Ming/Documents/Fantasy_Models/MLB_Models/gurobi.cpp")
library(Rcpp)
sourceCpp("C:/Users/Ming/Documents/Fantasy_Models/MLB_Models/gurobi.cpp")
install.packages("caret")
install.packages("gbm")
source("C:/Users/Ming/Documents/Fantasy_Models/MLB_Models/baseball_class.R")
library(caret)
library(gbm)
install.packages("caret")
library(caret)
install.packages("C:/Users/Ming/AppData/Local/Temp/RtmpW2VNM0/downloaded_packages/caret_6.0-80.zip")
install.packages("C:/Users/Ming/AppData/Local/Temp/RtmpW2VNM0/downloaded_packages/caret_6.0-80.rar")
install.packages("C:/Users/Ming/AppData/Local/Temp/RtmpW2VNM0/downloaded_packages/caret_6.0-80.zip")
library(Caret)
library(caret)
install.packages("e1071, dependences = T")
install.packages("e1071", dependencies = T)
install.packages("caret")
library(caret)
library(e1071)
install.packages("caret",
repos = "http://cran.r-project.org",
dependencies = c("Depends", "Imports", "Suggests"))
library(caret)
library(updateR)
install_github('andreacirilloac/updateR')
install.github('andreacirilloac/updateR')
library(devtools)
install_github('andreacirilloac/updateR')
library(caret)
install.packages('caret', dependencies = TRUE)
library(caret)
library(caretEnsemble)
install.packages("lme")
install.packages("lme4")
library(lme4)
install.packages("acc")
library(acc)
install.packageS("acc")
install.packages("acc")
rm(list = ls())
install.packages("acc")
install.packages("acc")
library(acc)
rm(list = ls())
install.packages("acc")
library(acc)
library(caret)
install.packages("caret")
library(caret)
installed.packages()
library(caretEnsemble)
source("C:/Users/Ming/Documents/Fantasy_Models/MLB_Models/baseball_class.R")
source("C:/Users/Ming/Documents/Fantasy_Models/MLB_Models/baseball_class.R")
d = 3
max.scores  = list()
saber.files = list.files(path.saber)[360:460]
dates       = lapply(saber.files, function(x) {
unlist(strsplit(gsub("[A-z\\.]", "", x),
split = " "))[1] })
date          = dates[[d]]
saber.file    = paste(path.saber, saber.files[[d]], sep = "/")
if(dim(read.csv(saber.file))[1] < 190) {
stop("Dataset too small!")
}
hitters.temp  = gsub.custom(path.hitters.proj, date)
pitchers.temp = gsub.custom(path.pitchers.proj, date)
hitters.proj  = merge.rotogrinders(hitters.temp, saber.file, TRUE)
pitchers.proj = merge.rotogrinders(pitchers.temp, saber.file, FALSE)
hitters = hitters.proj
pitchers = pitchers.proj
# Number of hitters
num.hitters    = nrow(hitters)
# Number of pitchers
num.pitchers   = nrow(pitchers)
# Create a matrix where each row is a vector for a different position
empty          = rep(0, num.hitters * 6)
hitters.matrix = matrix(empty, nrow = 6)
# Populate vectors for all positions
for(i in 1:num.hitters) {
if(grepl("1B", hitters[i, "Position"])) {
hitters.matrix[1, i] = 1
}
if(grepl("2B", hitters[i, "Position"])) {
hitters.matrix[2, i] = 1
}
if(grepl("3B", hitters[i, "Position"])) {
hitters.matrix[3, i] = 1
}
if(grepl("SS", hitters[i, "Position"])) {
hitters.matrix[4, i] = 1
}
if(grepl("C", hitters[i, "Position"])) {
hitters.matrix[5, i] = 1
}
if(grepl("OF", hitters[i, "Position"])) {
hitters.matrix[6, i] = 1
}
}
hitters.list = list(first.basemen  = hitters.matrix[1,],
second.basemen = hitters.matrix[2,],
third.basemen  = hitters.matrix[3,],
shortstops     = hitters.matrix[4,],
outfielders    = hitters.matrix[5,],
catchers       = hitters.matrix[6,])
# List where each entry is a vector that stores info on what team a player is on
teams     = unique(hitters[,"Team"])
num.teams = length(teams)
team.distribution = list()
for(i in 1:num.hitters) {
player.info = rep(0, num.teams)
for(j in 1:num.teams) {
if(hitters[i, "Team"] == teams[j]) {
player.info[j] = 1
}
}
team.distribution = list.append(team.distribution, player.info)
}
# Converting list into a matrix
hitters.teams = Reduce(function(x, y) {
rbind(x, y)
}, team.distribution)
# List where each entry is a vector that stores what game a hitter is playing in
players    = rbind(subset(hitters, select = -c(Order)), pitchers)
games      = unique(players[,"Teams.Playing"])
duplicated = c()
for(game in games) {
game = unlist(strsplit(game, split = "@"))
if(length(which(grepl(game[1], duplicated) &
grepl(game[2], duplicated))) > 0) {
games      = games[games != paste(game[1], game[2], sep = "@")]
} else {
duplicated = append(duplicated, paste(game[1], game[2], sep = "@"))
}
}
num.games          = length(games)
games.distribution = list()
for(i in 1:nrow(players)) {
player.info = rep(0, num.games)
team        = unlist(strsplit(players[i, "Teams.Playing"], split = "@"))
for(j in 1:num.games) {
if(grepl(team[1], games[j]) &
grepl(team[2], games[j])) {
player.info[j] = 1
}
}
games.distribution = list.append(games.distribution, player.info)
}
# Converting list into a matrix
players.games = Reduce(function(x, y) {
rbind(x, y)
}, games.distribution)
# Pitchers' opponents
opponents      = pitchers[,"Opponent"]
opponents.list = list()
for(i in 1:length(opponents)) {
for(j in 1:num.teams) {
if(opponents[i] == teams[j]) {
opponents.list = list.append(opponents.list, hitters.teams[,j])
}
}
}
pitchers.opponents = Reduce(function(x, y) {
rbind(x, y)
}, opponents.list)
# n by n matrix, where each entry (x,y) is 1 if the hitter in row x is within the same five-person
# lineup as the hitter in row y, and 0 otherwise
empty              = rep(0, num.hitters * num.hitters)
consecutive.matrix = matrix(empty, nrow = num.hitters)
for(i in 1:num.hitters) {
for(j in 1:num.hitters) {
consecutive.matrix[i, j] = ifelse(is.consecutive(hitters, i, j), 1, 0)
}
}
# Create a lineup
tracer      = matrix(rep(0, num.hitters + num.pitchers + num.teams + num.games),
nrow = 1)
basic.model = formulation(hitters, pitchers, tracer, num.overlap,
num.hitters, num.pitchers, hitters.list[[1]],
hitters.list[[2]], hitters.list[[3]],
hitters.list[[4]], hitters.list[[5]],
hitters.list[[6]], num.teams, hitters.teams,
num.games, hitters.games, players.games,
salary.cap, pitchers.opponents, consecutive.matrix)
obj.model   = objective(basic.model, hitters, pitchers,
num.teams, num.games, weight.a,
weight.b, weight.c, weight.d)
formulation = setup.model
objective = objective.a
basic.model = formulation(hitters, pitchers, tracer, num.overlap,
num.hitters, num.pitchers, hitters.list[[1]],
hitters.list[[2]], hitters.list[[3]],
hitters.list[[4]], hitters.list[[5]],
hitters.list[[6]], num.teams, hitters.teams,
num.games, hitters.games, players.games,
salary.cap, pitchers.opponents, consecutive.matrix)
obj.model   = objective(basic.model, hitters, pitchers,
num.teams, num.games, weight.a,
weight.b, weight.c, weight.d)
salary.cap = 50000
basic.model = formulation(hitters, pitchers, tracer, num.overlap,
num.hitters, num.pitchers, hitters.list[[1]],
hitters.list[[2]], hitters.list[[3]],
hitters.list[[4]], hitters.list[[5]],
hitters.list[[6]], num.teams, hitters.teams,
num.games, hitters.games, players.games,
salary.cap, pitchers.opponents, consecutive.matrix)
obj.model   = objective(basic.model, hitters, pitchers,
num.teams, num.games, weight.a,
weight.b, weight.c, weight.d)
num.overlap = 5
basic.model = formulation(hitters, pitchers, tracer, num.overlap,
num.hitters, num.pitchers, hitters.list[[1]],
hitters.list[[2]], hitters.list[[3]],
hitters.list[[4]], hitters.list[[5]],
hitters.list[[6]], num.teams, hitters.teams,
num.games, hitters.games, players.games,
salary.cap, pitchers.opponents, consecutive.matrix)
obj.model   = objective(basic.model, hitters, pitchers,
num.teams, num.games, weight.a,
weight.b, weight.c, weight.d)
params = list()
params$LogToConsole = 0
params$PoolSolutions = 25000
params$PoolSearchMode = 2
result = gurobi(model, params)
model = obj.model
result = gurobi(model, params)
df = list()
for(i in 1:length(result$pool)) {
df = list.append(df, result$pool[[i]]$xn[1:num.hitters + num.pitchers])
}
df = unique(df)
length(df)
df[[1]]
df[[2]]
for(i in df) {
print(length(which(df > 0.5))) }
for(i in df) {
print(length(which(i > 0.5))) }
params = list()
params$LogToConsole = 0
result = gurobi(model, params)
result$pool
df = list()
for(i in 1:length(result$pool)) {
df = list.append(df, result$pool[[i]]$xn[1:num.hitters + num.pitchers])
}
df[[1]]
df[[2]]
length(which(df == 1))
length(which(df[[1]] == 1))
result
result$xn
result$x
df
length(which(result$x == 1))
length(which(result$x[1:num.hitters+num.pitchers] == 1))
length(which(result$x[1:(num.hitters+num.pitchers)] == 1))
lst = list(1,2,3,4)
lst[lst > 2]
params$SolutionPool = 2500
params = list()
params$LogToConsole = 0
params$PoolSolutions = 25000
params$PoolSearchMode = 2
result = gurobi(model, params)
df = list()
for(i in 1:length(result$pool)) {
df = list.append(df, result$pool[[i]]$xn[1:num.hitters + num.pitchers])
}
df = unique(df)
df = df[length(which(df > 0.5)) == 10]
df1 = list()
for(i in 1:length(df)) {
if(length(which(df[[i]] > 0.5)) == 10) {
df1 = list.append(df1, df[[i]])
}
}
length(df1)
df = df1
indexes = list(which(df[[1]] > 0.5))
chosen = c(1)
for(i in 2:length(df)) {
lineup = df[[i]]
tryCatch({
for(j in 1:length(indexes)) {
temp = which(lineup == 1)
if(length(intersect(temp, indexes[[j]])) > 5) {
stop("Overlap bounds exceeded")
}
}
chosen = c(chosen, i)
indexes = list.append(indexes, which(df[[i]] == 1))
}, error = function(e) {})
}
length(chosen)
result
names(result)
result$x
result$pool
result$pool[[1]]
for(i in 1:length(result$pool)) {
print(length(which(result$pool[[i]]$xn > 0.5))) }
print(length(which(result$pool[[i]]$xn[1:(num.hitters + num.pitchers)] > 0.5))) }
for(i in 1:length(result$pool)) {
print(length(which(result$pool[[i]]$xn[1:(num.hitters + num.pitchers)] > 0.5))) }
df = list()
for(i in 1:length(result$pool)) {
df = list.append(df, result$pool[[i]]$xn[1:num.hitters + num.pitchers])
}
df = unique(df)
for(i in 1:length(df)) {
print(length(which(df[[i]] > 0.5))) }
df = list()
for(i in 1:length(result$pool)) {
df = list.append(df, result$pool[[i]]$xn[1:(num.hitters + num.pitchers)])
}
df = unique(df)
for(i in 1:length(df)) {
print(length(which(df[[i]] > 0.5))) }
indexes = list(which(df[[1]] > 0.5))
chosen = c(1)
for(i in 2:length(df)) {
lineup = df[[i]]
tryCatch({
for(j in 1:length(indexes)) {
temp = which(lineup == 1)
if(length(intersect(temp, indexes[[j]])) > 5) {
stop("Overlap bounds exceeded")
}
}
chosen = c(chosen, i)
indexes = list.append(indexes, which(df[[i]] == 1))
}, error = function(e) {})
}
length(chosen)
chosen
length(df)
df = df[chosen]
df = Reduce(function(x,y) {
rbind(x,y)
}, df)
df[1,]
scores = get.scores(df, hitters.proj, pitchers.proj)
max(scores)
out1 <- replicate(1000, 1:20, simplify=FALSE)
typeof(out1)
out1
df = list()
for(i in 1:length(result$pool)) {
df = list.append(df, result$pool[[i]]$xn[1:(num.hitters + num.pitchers)])
}
df = unique(df)
indexes = list(which(df[[1]] > 0.5))
chosen = c(1)
for(i in 2:length(df)) {
lineup = df[[i]]
tryCatch({
for(j in 1:length(indexes)) {
temp = which(lineup == 1)
if(length(intersect(temp, indexes[[j]])) > 5) {
stop("Overlap bounds exceeded")
}
}
chosen = c(chosen, i)
indexes = list.append(indexes, which(df[[i]] == 1))
}, error = function(e) {})
}
chosen = chosen[1:150]
df = df[chosen]
df = matrix(unlist(df), ncol=(num.hitters + num.pitchers), byrow=TRUE)
df[[1]]
dim(df)
df[1,]
scores = get.scores(df, hitters.proj, pitchers.proj)
max(scores)
params$PoolSolutions = 30000
result = gurobi(model, params)
df = list()
for(i in 1:length(result$pool)) {
df = list.append(df, result$pool[[i]]$xn[1:(num.hitters + num.pitchers)])
}
df = unique(df)
indexes = list(which(df[[1]] > 0.5))
chosen = c(1)
for(i in 2:length(df)) {
lineup = df[[i]]
tryCatch({
for(j in 1:length(indexes)) {
temp = which(lineup == 1)
if(length(intersect(temp, indexes[[j]])) > 5) {
stop("Overlap bounds exceeded")
}
}
chosen = c(chosen, i)
indexes = list.append(indexes, which(df[[i]] == 1))
}, error = function(e) {})
}
length(chosen)
df = df[chosen]
scores = get.scores(df, hitters.proj, pitchers.proj)
dim(df)
df
df[1,]
df = matrix(unlist(df), ncol=(num.hitters + num.pitchers), byrow=TRUE)
dim(df)
scores = get.scores(df, hitters.proj, pitchers.proj)
max(scores)
a = 0
b = 0
c = 0
d = 0
num.lineups = 150
num.overlap = 5
df     = create_lineups(num.lineups, num.overlap, setup.model, objective.a,
salary.cap, hitters.proj, pitchers.proj, a, b,
c, d, F)

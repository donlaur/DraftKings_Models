}
## Create desired number of lineups with desired model
## ------------------------------------------------------------ ##
create_lineups = function(num.lineups, num.overlap, formulation, salary.cap,
hitters, pitchers) {
# Number of hitters
num.hitters = nrow(hitters)
# Number of pitchers
num.pitchers = nrow(pitchers)
# Create a matrix where each row is a vector for a different position
empty = rep(0, num.hitters * 6)
hitters.matrix = matrix(empty, nrow = 6)
# Populate vectors for all positions
for(i in 1:num.hitters) {
if(grepl("1B", hitters[i, "Position"])) {
hitters.matrix[1, i] = 1
}
if(grepl("2B", hitters[i, "Position"])) {
hitters.matrix[2, i] = 1
}
if(grepl("3B", hitters[i, "Position"])) {
hitters.matrix[3, i] = 1
}
if(grepl("SS", hitters[i, "Position"])) {
hitters.matrix[4, i] = 1
}
if(grepl("OF", hitters[i, "Position"])) {
hitters.matrix[5, i] = 1
}
if(grepl("C", hitters[i, "Position"])) {
hitters.matrix[6, i] = 1
}
}
hitters.list = list(first.basemen = hitters.matrix[1,],
second.basemen = hitters.matrix[2,],
third.basemen = hitters.matrix[3,],
shortstops = hitters.matrix[4,],
outfielders = hitters.matrix[5,],
catchers = hitters.matrix[6,])
# List where each entry is a vector that stores info on what team a player is on
teams = unique(hitters[,"Team"])
num.teams = length(teams)
team.distribution = list()
for(i in 1:num.hitters) {
player.info = rep(0, num.teams)
for(j in 1:num.teams) {
if(hitters[i, "Team"] == teams[j]) {
player.info[j] = 1
}
}
team.distribution = list.append(team.distribution, player.info)
}
# Converting list into a matrix
hitters.teams = Reduce(function(x, y) {
rbind(x, y)
}, team.distribution)
# List where each entry is a vector that stores what game a hitter is playing in
games = unique(hitters[,"Teams.Playing"])
num.games = length(games)
games.distribution = list()
for(i in 1:num.hitters) {
player.info = rep(0, num.games)
for(j in 1:num.games) {
if(hitters[i, "Teams.Playing"] == games[j]) {
player.info[j] = 1
}
}
games.distribution = list.append(games.distribution, player.info)
}
# Converting list into a matrix
hitters.games = Reduce(function(x, y) {
rbind(x, y)
}, games.distribution)
# List where each entry is a vector that stores what game a pitcher is playing in
games = unique(pitchers[,"Teams.Playing"])
num.games = length(games)
games.distribution = list()
for(i in 1:num.pitchers) {
player.info = rep(0, num.games)
for(j in 1:num.games) {
if(pitchers[i, "Teams.Playing"] == games[j]) {
player.info[j] = 1
}
}
games.distribution = list.append(games.distribution, player.info)
}
# Converting list into a matrix
pitchers.games = Reduce(function(x, y) {
rbind(x, y)
}, games.distribution)
# Mock variance vector
# players.sd = append(hitters$Sigma, pitchers$Sigma)
# Covariance matrix
# hitters.covariance = get.cov(hitter.list, hitters)
# Pitchers' opponents
opponents = pitchers[,"Opponent"]
opponents.list = list()
for(i in 1:length(opponents)) {
for(j in 1:num.teams) {
if(opponents[i] == teams[j]) {
opponents.list = list.append(opponents.list, hitters.teams[,j])
}
}
}
pitchers.opponents = Reduce(function(x, y) {
rbind(x, y)
}, opponents.list)
# Create a lineup
tracer = matrix(rep(0, num.hitters + num.pitchers), nrow = 1)
lineups = formulation(hitters, pitchers, tracer, num.overlap,
num.hitters, num.pitchers, hitters.list[[1]],
hitters.list[[2]], hitters.list[[3]],
hitters.list[[4]], hitters.list[[5]],
hitters.list[[6]], num.teams, hitters.teams,
num.games, hitters.games, pitchers.games,
salary.cap, pitchers.opponents)
lineups = matrix(lineups, nrow = 1)
if(num.lineups > 1) {
for(i in 1:(num.lineups - 1)) {
lineup = formulation(hitters, pitchers, lineups, num.overlap,
num.hitters, num.pitchers, hitters.list[[1]],
hitters.list[[2]], hitters.list[[3]],
hitters.list[[4]], hitters.list[[5]],
hitters.list[[6]], num.teams, hitters.teams,
num.games, hitters.games, pitchers.games,
salary.cap, pitchers.opponents)
lineups = rbind(lineups, lineup)
}
}
return(lineups)
}
## Takes the lineups matrix and writes it to a CSV file, where each
## row is a lineup
## ------------------------------------------------------------ ##
lineups.to.csv = function(lineups, hitters, pitchers, path.output) {
for(i in 1:nrow(lineups)) {
lineup = lineups[i,]
chosen.hitters = lineup[1:nrow(hitters)]
chosen.pitchers = lineup[(nrow(hitters) + 1):length(lineup)]
hitters.indices = which(chosen.hitters == 1)
pitchers.indices = which(chosen.pitchers == 1)
names = append(c(hitters[hitters.indices, "Name"]),
c(pitchers[pitchers.indices, "Name"]))
points = sum(hitters[hitters.indices, "Projection"]) +
sum(pitchers[pitchers.indices, "Projection"])
names = append(names, toString(points))
write.table(matrix(names, nrow = 1),
path.output,
sep = ",",
append = T,
col.names = F,
row.names = F)
}
print(paste("CSV successfully exported to ", path.output, sep = " "))
}
## Takes the lineups matrix and returns a vector of scores, where
## each score is the score of the respective lineup
## ------------------------------------------------------------ ##
get.scores = function(lineups, hitters, pitchers,
hitters.actual, pitchers.actual) {
# Points vector
points = rep(0, nrow(lineups))
for(i in 1:nrow(lineups)) {
lineup = lineups[i,]
chosen.hitters = lineup[1:nrow(hitters)]
chosen.pitchers = lineup[(nrow(hitters) + 1):length(lineup)]
hitters.indices = which(chosen.hitters == 1)
pitchers.indices = which(chosen.pitchers == 1)
for(j in hitters.indices) {
name = unlist(strsplit(hitters[j,1], split = " "))
row = which(grepl(name[1], hitters.actual[,1]) & grepl(name[2], hitters.actual[,1]))
if(length(row) == 0) {
name = hitters[j,1]
for(k in 1:nrow(hitters.actual)) {
hitter.name = unlist(strsplit(unlist(hitters.actual[k,1]), split = " "))
if(all(sapply(hitter.name, function(x) {
grepl(x, name, ignore.case = T)
}))) {
row = k
}
}
}
if(length(row) == 0) {
name = unlist(strsplit(hitters[j,1], split = " "))
team = substring(hitters[j,"Team"], 1, 1)
row = which(grepl(team, hitters.actual[,"Team"]) & grepl(name[length(name)], hitters.actual[,1]) &
grepl(substring(name[length(name)-1], 1, 1), hitters.actual[,1]))
}
tryCatch ({
points[i] = points[i] + hitters.actual[row, "Projection"]
}, error = function(e) {print(name)})
}
for(j in pitchers.indices) {
name = unlist(strsplit(pitchers[j,1], split = " "))
row = which(grepl(name[1], pitchers.actual[,1]) & grepl(name[2], pitchers.actual[,1]))
if(length(row) == 0) {
name = pitchers[j,1]
for(k in 1:nrow(pitchers.actual)) {
pitcher.name = unlist(strsplit(unlist(pitchers.actual[k,1]), split = " "))
if(all(sapply(pitcher.name, function(x) {
grepl(x, name, ignore.case = T)
}))) {
row = k
}
}
}
if(length(row) == 0) {
name = unlist(strsplit(pitchers[j,1], split = " "))
team = substring(pitchers[j,"Team"], 1, 1)
row = which(grepl(team, pitchers.actual[,"Team"]) & grepl(name[length(name)], pitchers.actual[,1]) &
grepl(substring(name[length(name)-1], 1, 1), pitchers.actual[,1]))
}
tryCatch ({
points[i] = points[i] + pitchers.actual[row, "Projection"]
}, error = function(e) {print(name)})
}
}
return(points)
}
## Returns the optimal lineup performance
## ------------------------------------------------------------ ##
get.optimum = function(df, hitters.actual, pitchers.actual) {
lineup = df
chosen.hitters = lineup[1:nrow(hitters.actual)]
chosen.pitchers = lineup[(nrow(hitters.actual) + 1):length(lineup)]
hitters.indices = which(chosen.hitters == 1)
pitchers.indices = which(chosen.pitchers == 1)
points = sum(hitters.actual[hitters.indices, "Projection"]) +
sum(pitchers.actual[pitchers.indices, "Projection"])
return(points)
}
## Backtesting on historical Draftkings data
## ------------------------------------------------------------ ##
gsub.custom = function(str, year, month, day) {
str = gsub("YEAR", year, str)
str = gsub("MONTH", month, str)
str = ifelse(day < 10,
gsub("DAY", paste("0", toString(day), sep = ""), str),
gsub("DAY", day, str))
return(str)
}
backtest = function(overlaps, salary.cap,
num.lineups, path.hitters.proj,
path.pitchers.proj, path.players.actual,
year, month, days) {
for(overlap in overlaps) {
num.days = days[[toString(month)]]
for(day in 6:num.days) {
path.hitters.proj.temp = gsub.custom(path.hitters.proj, year, month, day)
path.pitchers.proj.temp = gsub.custom(path.pitchers.proj, year, month, day)
path.players.actual.temp = gsub.custom(path.players.actual, year, month, day)
tryCatch({
hitters.proj = clean.rotogrinders(path.hitters.proj.temp)
pitchers.proj = clean.rotogrinders(path.pitchers.proj.temp)
hitters.actual = clean.rotoguru(path.players.actual.temp,
hitters.proj,
pitchers.proj)[[2]]
pitchers.actual = clean.rotoguru(path.players.actual.temp,
hitters.proj,
pitchers.proj)[[1]]
df = create_lineups(num.lineups, overlap,
stacked.lineup, salary.cap,
hitters.proj, pitchers.proj)
scores = get.scores(df, hitters.proj, pitchers.proj,
hitters.actual, pitchers.actual)
# model.scores = append(model.scores, max(scores))
file_name = paste("model", toString(overlap), sep = "")
write(max(scores), file = paste(file_name, ".txt", sep = ""), append = T)
optimum = create_lineups(1, overlap, nonstacked.lineup,
salary.cap, hitters.actual, pitchers.actual)
score = get.optimum(optimum, hitters.actual, pitchers.actual)
# max.scores = append(max.scores, score)
file_name = paste("max", toString(overlap), sep = "")
write(score, file = paste(file_name, ".txt", sep = ""), append = T)
}, error = function(e) {print(e)})
}
# model.scorelist = list.append(model.scorelist, model.scores)
# max.scorelist = list.append(max.scorelist, max.scores)
}
}
# Overlaps to test
overlaps = 5:7
# Salary cap
salary.cap = 50000
# Lineups to generate per entry
num.lineups = 150
# Dates to test
year = 2018
month = 6
days = list("4" = 30, "5" = 31, "6" = 30, "7" = 31, "8" = 4)
# Paths to required folders
path.hitters.proj = "C:/Users/Ming/Documents/Fantasy_Models/Historical_Projections_MLB/Hitters/hitter_YEAR-0MONTH-DAY.csv"
path.pitchers.proj = "C:/Users/Ming/Documents/Fantasy_Models/Historical_Projections_MLB/Pitchers/pitcher_YEAR-0MONTH-DAY.csv"
path.players.actual = "C:/Users/Ming/Documents/Fantasy_Models/Actual_Scores_MLB/players_YEAR-0MONTH-DAY.csv"
# Run backtesting (this will take hours and hours)
backtest(overlaps, salary.cap,
num.lineups, path.hitters.proj,
path.pitchers.proj, path.players.actual,
year, month, days)
source("C:/Users/Ming/Documents/Fantasy_Models/MLB_Models/baseball_class.R")
# Overlaps to test
overlaps = 5:6
# Salary cap
salary.cap = 50000
# Lineups to generate per entry
num.lineups = 150
# Dates to test
year = 2018
month = 6
days = list("4" = 30, "5" = 31, "6" = 30, "7" = 31, "8" = 4)
# Paths to required folders
path.hitters.proj = "C:/Users/Ming/Documents/Fantasy_Models/Historical_Projections_MLB/Hitters/hitter_YEAR-0MONTH-DAY.csv"
path.pitchers.proj = "C:/Users/Ming/Documents/Fantasy_Models/Historical_Projections_MLB/Pitchers/pitcher_YEAR-0MONTH-DAY.csv"
path.players.actual = "C:/Users/Ming/Documents/Fantasy_Models/Actual_Scores_MLB/players_YEAR-0MONTH-DAY.csv"
# Run backtesting (this will take hours and hours)
backtest(overlaps, salary.cap,
num.lineups, path.hitters.proj,
path.pitchers.proj, path.players.actual,
year, month, days)
install.packageS("REEMtree")
install.packages("REEMtree")
data(simpleREEMdata)
data(package = REEMtree)
data(package = "REEMtree")
data(simpleREEMdata)
typeof(data(package = "REEMtree"))
data(package = "REEMtree")[[1]]
data(package = "REEMtree")[[2]]
data(package = "REEMtree")[[1]]
data(package = "REEMtree")[[1]][1]
data(simpleREEMdata, package = "REEMtree")
simpleREEMdata
View(simpleREEMdata)
REEMresult<-REEMtree(Y~D+t+X, data=simpleREEMdata, random=~1|ID)
library(REEMtree)
REEMresult<-REEMtree(Y~D+t+X, data=simpleREEMdata, random=~1|ID)
print(REEMresult)
choose(3,2)
choose(4,2)
install.packages("cplex")
install.packages("ROI.plugini.cplex")
install.packages("ROI.plugin.cplex")
install.packages("Rcplex")
getOption('repos')
install.packages('Rcplex', repo='http://nbcgib.uesc.br/mirrors/cran/')
install.packages('Rcplex', repo='http://cran.mirror.garr.it/mirrors/CRAN/')
install.packages('Rcplex', repo='http://cran.ism.ac.jp/')
install.packages('Rcplex', repo='http://r.adu.org.za/')
install.packages('Rcplex', repo='https://cran.cnr.Berkeley.edu/')
install.packages("Rtools")
date
dates[[1]]
date = dates[[i]]
path.hitters.proj.temp = gsub.custom(path.hitters.proj, date)
path.pitchers.proj.temp = gsub.custom(path.pitchers.proj, date)
path.players.actual.temp = gsub.custom(path.players.actual, date)
saber.file = paste(path.saber, saber.files[[i]], sep = "/")
hitters.proj = merge.rotogrinders(path.hitters.proj.temp, saber.file, TRUE)
pitchers.proj = merge.rotogrinders(path.pitchers.proj.temp, saber.file, FALSE)
View(hitters.proj)
rm(list = ls())
source("C:/Users/Ming/Documents/Fantasy_Models/MLB_Models/baseball_class.R")
num.overlap = 7
salary.cap = 50000
num.lineups = 150
max.scores  = list()
saber.files = list.files(path.saber)[360:460]
dates       = lapply(saber.files, function(x) {
unlist(strsplit(gsub("[A-z\\.]", "", x),
split = " "))[1] })
d = 1
date          = dates[[d]]
saber.file    = paste(path.saber, saber.files[[d]], sep = "/")
if(dim(read.csv(saber.file))[1] < 190) {
stop("Dataset too small!")
}
d = 2
date          = dates[[d]]
saber.file    = paste(path.saber, saber.files[[d]], sep = "/")
if(dim(read.csv(saber.file))[1] < 190) {
stop("Dataset too small!")
}
d = 3
date          = dates[[d]]
saber.file    = paste(path.saber, saber.files[[d]], sep = "/")
if(dim(read.csv(saber.file))[1] < 190) {
stop("Dataset too small!")
}
hitters.temp  = gsub.custom(path.hitters.proj, date)
pitchers.temp = gsub.custom(path.pitchers.proj, date)
hitters.proj  = merge.rotogrinders(hitters.temp, saber.file, TRUE)
pitchers.proj = merge.rotogrinders(pitchers.temp, saber.file, FALSE)
for(a in c(0.2, 0.4, 0.6, 0.8)) {
for(b in c(0.2, 0.4, 0.6, 0.8)) {
df     = create_lineups(num.lineups, num.overlap, setup.model, objective.b,
salary.cap, hitters.proj, pitchers.proj, a, b,
0, 0, F)
scores = get.scores(df, hitters.proj, pitchers.proj)
print(paste(toString(date), paste(toString(a), toString(b), sep = "//"), sep = "//"))
print(max(scores))
}
}
num.lineups
df
lineups.to.csv(df, hitters.proj, pitchers.proj, path.output)
num.overlap = 6
for(a in c(0.2, 0.4, 0.6, 0.8)) {
for(b in c(0.2, 0.4, 0.6, 0.8)) {
df     = create_lineups(num.lineups, num.overlap, setup.model, objective.b,
salary.cap, hitters.proj, pitchers.proj, a, b,
0, 0, F)
scores = get.scores(df, hitters.proj, pitchers.proj)
print(paste(toString(date), paste(toString(a), toString(b), sep = "//"), sep = "//"))
print(max(scores))
}
}
num.overlap = 5
for(a in c(0.2, 0.4, 0.6, 0.8)) {
for(b in c(0.2, 0.4, 0.6, 0.8)) {
df     = create_lineups(num.lineups, num.overlap, setup.model, objective.b,
salary.cap, hitters.proj, pitchers.proj, a, b,
0, 0, F)
scores = get.scores(df, hitters.proj, pitchers.proj)
print(paste(toString(date), paste(toString(a), toString(b), sep = "//"), sep = "//"))
print(max(scores))
}
}
d = 4
date          = dates[[d]]
saber.file    = paste(path.saber, saber.files[[d]], sep = "/")
if(dim(read.csv(saber.file))[1] < 190) {
stop("Dataset too small!")
}
d = 5
date          = dates[[d]]
saber.file    = paste(path.saber, saber.files[[d]], sep = "/")
if(dim(read.csv(saber.file))[1] < 190) {
stop("Dataset too small!")
}
d = 6
num.overlap
hitters.temp  = gsub.custom(path.hitters.proj, date)
pitchers.temp = gsub.custom(path.pitchers.proj, date)
hitters.proj  = merge.rotogrinders(hitters.temp, saber.file, TRUE)
pitchers.proj = merge.rotogrinders(pitchers.temp, saber.file, FALSE)
for(a in c(0.2, 0.4, 0.6, 0.8)) {
for(b in c(0.2, 0.4, 0.6, 0.8)) {
df     = create_lineups(num.lineups, num.overlap, setup.model, objective.b,
salary.cap, hitters.proj, pitchers.proj, a, b,
0, 0, F)
scores = get.scores(df, hitters.proj, pitchers.proj)
print(paste(toString(date), paste(toString(a), toString(b), sep = "//"), sep = "//"))
print(max(scores))
}
}
dim(pitchers.proj)
dim(hitters.proj)
d = 7
date          = dates[[d]]
saber.file    = paste(path.saber, saber.files[[d]], sep = "/")
if(dim(read.csv(saber.file))[1] < 190) {
stop("Dataset too small!")
}
hitters.temp  = gsub.custom(path.hitters.proj, date)
pitchers.temp = gsub.custom(path.pitchers.proj, date)
hitters.proj  = merge.rotogrinders(hitters.temp, saber.file, TRUE)
pitchers.proj = merge.rotogrinders(pitchers.temp, saber.file, FALSE)
for(a in c(0.2, 0.4, 0.6, 0.8)) {
for(b in c(0.2, 0.4, 0.6, 0.8)) {
df     = create_lineups(num.lineups, num.overlap, setup.model, objective.b,
salary.cap, hitters.proj, pitchers.proj, a, b,
0, 0, F)
scores = get.scores(df, hitters.proj, pitchers.proj)
print(paste(toString(date), paste(toString(a), toString(b), sep = "//"), sep = "//"))
print(max(scores))
}
}
num.overlap
num.overlap = 7
for(a in c(0.2, 0.4, 0.6, 0.8)) {
for(b in c(0.2, 0.4, 0.6, 0.8)) {
df     = create_lineups(num.lineups, num.overlap, setup.model, objective.b,
salary.cap, hitters.proj, pitchers.proj, a, b,
0, 0, F)
scores = get.scores(df, hitters.proj, pitchers.proj)
print(paste(toString(date), paste(toString(a), toString(b), sep = "//"), sep = "//"))
print(max(scores))
}
}
source("C:/Users/Ming/Documents/Fantasy_Models/MLB_Models/baseball_class.R")
num.overlap = 5
for(a in c(0.2, 0.4, 0.6, 0.8)) {
for(b in c(0.2, 0.4, 0.6, 0.8)) {
df     = create_lineups(num.lineups, num.overlap, setup.model, objective.b,
salary.cap, hitters.proj, pitchers.proj, a, b,
0, 0, F)
scores = get.scores(df, hitters.proj, pitchers.proj)
print(paste(toString(date), paste(toString(a), toString(b), sep = "//"), sep = "//"))
print(max(scores))
}
}
source("C:/Users/Ming/Documents/Fantasy_Models/MLB_Models/baseball_class.R")
for(a in c(0.2, 0.4, 0.6, 0.8)) {
for(b in c(0.2, 0.4, 0.6, 0.8)) {
df     = create_lineups(num.lineups, num.overlap, setup.model, objective.b,
salary.cap, hitters.proj, pitchers.proj, a, b,
0, 0, F)
scores = get.scores(df, hitters.proj, pitchers.proj)
print(paste(toString(date), paste(toString(a), toString(b), sep = "//"), sep = "//"))
print(max(scores))
}
}
